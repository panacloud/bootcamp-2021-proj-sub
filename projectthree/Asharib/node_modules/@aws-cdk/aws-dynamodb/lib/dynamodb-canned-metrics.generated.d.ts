export declare class DynamoDBMetrics {
    static userErrorsSum(dimensions: {
        TableName: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            TableName: string;
        };
        statistic: string;
    };
    static throttledRequestsSum(dimensions: {
        TableName: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            TableName: string;
        };
        statistic: string;
    };
    static consumedReadCapacityUnitsSum(dimensions: {
        TableName: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            TableName: string;
        };
        statistic: string;
    };
    static provisionedReadCapacityUnitsSum(dimensions: {
        TableName: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            TableName: string;
        };
        statistic: string;
    };
    static consumedWriteCapacityUnitsSum(dimensions: {
        TableName: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            TableName: string;
        };
        statistic: string;
    };
    static provisionedWriteCapacityUnitsSum(dimensions: {
        TableName: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            TableName: string;
        };
        statistic: string;
    };
    static successfulRequestLatencyAverage(dimensions: {
        Operation: string;
        TableName: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            Operation: string;
            TableName: string;
        };
        statistic: string;
    };
    static returnedBytesAverage(dimensions: {
        Operation: string;
        TableName: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            Operation: string;
            TableName: string;
        };
        statistic: string;
    };
    static returnedItemCountSum(dimensions: {
        Operation: string;
        TableName: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            Operation: string;
            TableName: string;
        };
        statistic: string;
    };
}
