"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KinesisMetrics = void 0;
const kinesis_canned_metrics_generated_1 = require("./kinesis-canned-metrics.generated");
/**
 * This class is to consolidate all the metrics from Stream in just one place.
 *
 * Current generated canned metrics don't match the proper metrics from the service. If it is fixed
 * at the source this class can be removed and just use the generated one directly.
 *
 * Stream Metrics reference: https://docs.aws.amazon.com/streams/latest/dev/monitoring-with-cloudwatch.html
 */
class KinesisMetrics {
    static getRecordsBytesAverage(dimensions) {
        return {
            namespace: 'AWS/Kinesis',
            metricName: 'GetRecords.Bytes',
            dimensions,
            statistic: 'Average',
        };
    }
    static getRecordsSuccessAverage(dimensions) {
        return {
            namespace: 'AWS/Kinesis',
            metricName: 'GetRecords.Success',
            dimensions,
            statistic: 'Average',
        };
    }
    static getRecordsRecordsAverage(dimensions) {
        return {
            namespace: 'AWS/Kinesis',
            metricName: 'GetRecords.Records',
            dimensions,
            statistic: 'Average',
        };
    }
    static getRecordsLatencyAverage(dimensions) {
        return {
            namespace: 'AWS/Kinesis',
            metricName: 'GetRecords.Latency',
            dimensions,
            statistic: 'Average',
        };
    }
    static putRecordBytesAverage(dimensions) {
        return {
            namespace: 'AWS/Kinesis',
            metricName: 'PutRecord.Bytes',
            dimensions,
            statistic: 'Average',
        };
    }
    static putRecordLatencyAverage(dimensions) {
        return {
            namespace: 'AWS/Kinesis',
            metricName: 'PutRecord.Latency',
            dimensions,
            statistic: 'Average',
        };
    }
    static getRecordsIteratorAgeMillisecondsMaximum(dimensions) {
        return kinesis_canned_metrics_generated_1.KinesisMetrics.getRecordsIteratorAgeMillisecondsMaximum(dimensions);
    }
    static putRecordSuccessAverage(dimensions) {
        return kinesis_canned_metrics_generated_1.KinesisMetrics.putRecordSuccessAverage(dimensions);
    }
    static putRecordsBytesAverage(dimensions) {
        return kinesis_canned_metrics_generated_1.KinesisMetrics.putRecordsBytesAverage(dimensions);
    }
    static putRecordsLatencyAverage(dimensions) {
        return {
            namespace: 'AWS/Kinesis',
            metricName: 'PutRecords.Latency',
            dimensions,
            statistic: 'Average',
        };
    }
    static putRecordsSuccessAverage(dimensions) {
        return {
            namespace: 'AWS/Kinesis',
            metricName: 'PutRecords.Success',
            dimensions,
            statistic: 'Average',
        };
    }
    static putRecordsTotalRecordsAverage(dimensions) {
        return {
            namespace: 'AWS/Kinesis',
            metricName: 'PutRecords.TotalRecords',
            dimensions,
            statistic: 'Average',
        };
    }
    static putRecordsSuccessfulRecordsAverage(dimensions) {
        return {
            namespace: 'AWS/Kinesis',
            metricName: 'PutRecords.SuccessfulRecords',
            dimensions,
            statistic: 'Average',
        };
    }
    static putRecordsFailedRecordsAverage(dimensions) {
        return {
            namespace: 'AWS/Kinesis',
            metricName: 'PutRecords.FailedRecords',
            dimensions,
            statistic: 'Average',
        };
    }
    static putRecordsThrottledRecordsAverage(dimensions) {
        return {
            namespace: 'AWS/Kinesis',
            metricName: 'PutRecords.ThrottledRecords',
            dimensions,
            statistic: 'Average',
        };
    }
    static incomingBytesAverage(dimensions) {
        return kinesis_canned_metrics_generated_1.KinesisMetrics.incomingBytesAverage(dimensions);
    }
    static incomingRecordsAverage(dimensions) {
        return kinesis_canned_metrics_generated_1.KinesisMetrics.incomingRecordsAverage(dimensions);
    }
    static readProvisionedThroughputExceededAverage(dimensions) {
        return kinesis_canned_metrics_generated_1.KinesisMetrics.readProvisionedThroughputExceededAverage(dimensions);
    }
    static writeProvisionedThroughputExceededAverage(dimensions) {
        return kinesis_canned_metrics_generated_1.KinesisMetrics.writeProvisionedThroughputExceededAverage(dimensions);
    }
}
exports.KinesisMetrics = KinesisMetrics;
//# sourceMappingURL=data:application/json;base64,