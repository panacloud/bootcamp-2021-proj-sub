"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const stream_1 = require("stream");
const string_decoder_1 = require("string_decoder");
const cxschema = require("@aws-cdk/cloud-assembly-schema");
const cloudformation_deployments_1 = require("../lib/api/cloudformation-deployments");
const cdk_toolkit_1 = require("../lib/cdk-toolkit");
const util_1 = require("./util");
let cloudExecutable;
let cloudFormation;
let toolkit;
beforeEach(() => {
    cloudExecutable = new util_1.MockCloudExecutable({
        stacks: [{
                stackName: 'A',
                template: { resource: 'A' },
            },
            {
                stackName: 'B',
                depends: ['A'],
                template: { resource: 'B' },
            },
            {
                stackName: 'C',
                depends: ['A'],
                template: { resource: 'C' },
                metadata: {
                    '/resource': [
                        {
                            type: cxschema.ArtifactMetadataEntryType.ERROR,
                            data: 'this is an error',
                        },
                    ],
                },
            },
            {
                stackName: 'D',
                template: { resource: 'D' },
            }],
    });
    cloudFormation = util_1.instanceMockFrom(cloudformation_deployments_1.CloudFormationDeployments);
    toolkit = new cdk_toolkit_1.CdkToolkit({
        cloudExecutable,
        cloudFormation,
        configuration: cloudExecutable.configuration,
        sdkProvider: cloudExecutable.sdkProvider,
    });
    // Default implementations
    cloudFormation.readCurrentTemplate.mockImplementation((stackArtifact) => {
        if (stackArtifact.stackName === 'D') {
            return Promise.resolve({ resource: 'D' });
        }
        return Promise.resolve({});
    });
    cloudFormation.deployStack.mockImplementation((options) => Promise.resolve({
        noOp: true,
        outputs: {},
        stackArn: '',
        stackArtifact: options.stack,
    }));
});
test('diff can diff multiple stacks', async () => {
    // GIVEN
    const buffer = new StringWritable();
    // WHEN
    const exitCode = await toolkit.diff({
        stackNames: ['B'],
        stream: buffer,
    });
    // THEN
    const plainTextOutput = buffer.data.replace(/\x1B\[[0-?]*[ -/]*[@-~]/g, '');
    expect(plainTextOutput).toContain('Stack A');
    expect(plainTextOutput).toContain('Stack B');
    expect(exitCode).toBe(0);
});
test('exits with 1 with diffs and fail set to true', async () => {
    // GIVEN
    const buffer = new StringWritable();
    // WHEN
    const exitCode = await toolkit.diff({
        stackNames: ['A'],
        stream: buffer,
        fail: true,
    });
    // THEN
    expect(exitCode).toBe(1);
});
test('exits with 1 with diff in first stack, but not in second stack and fail set to true', async () => {
    // GIVEN
    const buffer = new StringWritable();
    // WHEN
    const exitCode = await toolkit.diff({
        stackNames: ['A', 'D'],
        stream: buffer,
        fail: true,
    });
    // THEN
    expect(exitCode).toBe(1);
});
test('throws an error during diffs on stack with error metadata', async () => {
    const buffer = new StringWritable();
    // WHEN
    await expect(() => toolkit.diff({
        stackNames: ['C'],
        stream: buffer,
    })).rejects.toThrow(/Found errors/);
});
class StringWritable extends stream_1.Writable {
    constructor(options = {}) {
        super(options);
        this._decoder = new string_decoder_1.StringDecoder(options && options.defaultEncoding);
        this.data = '';
    }
    _write(chunk, encoding, callback) {
        if (encoding === 'buffer') {
            chunk = this._decoder.write(chunk);
        }
        this.data += chunk;
        callback();
    }
    _final(callback) {
        this.data += this._decoder.end();
        callback();
    }
}
//# sourceMappingURL=data:application/json;base64,